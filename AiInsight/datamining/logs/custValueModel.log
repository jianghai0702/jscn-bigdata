2017-12-29 19:40:59,871 [INFO] {custValueModel.py:292} model mudule is beginnig at 2017-12-29 19:40:59
2017-12-29 19:40:59,871 [INFO] {custValueTableDdl.py:52} 客户价值临时表及最终特征表定义...
2017-12-29 19:40:59,871 [INFO] {hiveUtils.py:78} Executive sql is:
 drop table tmp_valid_cust_user
2017-12-29 19:40:59,967 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:40:59,968 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_base_info
2017-12-29 19:41:00,150 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:00,151 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_busi_info
2017-12-29 19:41:00,332 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:00,332 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_prod_ord
2017-12-29 19:41:00,552 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:00,552 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_prod_ord_count
2017-12-29 19:41:00,716 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:00,716 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_prod_ord_date
2017-12-29 19:41:00,881 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:00,881 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_bill_info
2017-12-29 19:41:01,082 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:01,082 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_review_info
2017-12-29 19:41:01,276 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:01,276 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_vod_info
2017-12-29 19:41:01,462 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:01,462 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_tv_info
2017-12-29 19:41:01,665 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:01,665 [INFO] {hiveUtils.py:78} Executive sql is:

                           drop table tmp_custvalue_view_info
               
2017-12-29 19:41:01,830 [INFO] {hiveUtils.py:80} Successful implementation of this sql
2017-12-29 19:41:01,831 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_valid_cust_user (
                            CUST_ID          STRING,
                            PROD_INST_ID     STRING 
                         ) STORED AS RCFILE
                          LOCATION '/user/hive/TEMP/tmp_valid_cust_user'
                         
2017-12-29 19:41:01,985 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:01,985 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_base_info (
                               CUST_ID          STRING,
                               CUST_CODE        STRING,
                               CUST_NAME        STRING,
                               CORP_ORG_ID      STRING,
                               CORP_ORG_NAME    STRING,
                               CUST_LEVEL       STRING,
                               CUST_TYPE        STRING,
                               NET_AGE          STRING        
                           ) STORED AS RCFILE
                            LOCATION '/user/hive/TEMP/tmp_custvalue_base_info'
                           
2017-12-29 19:41:02,219 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:02,219 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_busi_info (
                             CUST_ID          STRING,
                             USER_COUNT       STRING,
                             ITV_USER_COUNT   STRING,
                             FEE_USR_CNT      STRING,
                             dbitv_usr_cnt    STRING,
                             ditv_usr_cnt     STRING,
                             hdtv_usr_cnt     STRING,
                             lan_usr_cnt      STRING
                         ) STORED AS RCFILE
                          LOCATION '/user/hive/TEMP/tmp_custvalue_busi_info'
                         
2017-12-29 19:41:02,387 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:02,387 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_prod_ord (
                              PROD_INST_ID     STRING,
                              PROD_ID          STRING,
                              CREATE_DATE      STRING
                      ) STORED AS RCFILE
                      LOCATION '/user/hive/TEMP/tmp_custvalue_prod_ord'
                   
2017-12-29 19:41:02,562 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:02,562 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_prod_ord_count (
                              PROD_INST_ID     STRING,
                              PROD_COUNT_1m    STRING,
                              PROD_COUNT_3m    STRING
                      ) STORED AS RCFILE
                      LOCATION '/user/hive/TEMP/tmp_custvalue_prod_ord_count'
                   
2017-12-29 19:41:02,741 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:02,741 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_prod_ord_date (
                             PROD_INST_ID     STRING,
                             LAST_DATE_ORD     STRING
                      ) STORED AS RCFILE
                      LOCATION '/user/hive/TEMP/tmp_custvalue_prod_ord_date'
                   
2017-12-29 19:41:02,909 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:02,909 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_bill_info (
                                 PROD_INST_ID         STRING,
                                 bill_amount_3m       STRING,
                                 bill_amount_1m       STRING
                         ) STORED AS RCFILE
                         LOCATION '/user/hive/TEMP/tmp_custvalue_bill_info'
                      
2017-12-29 19:41:03,305 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:03,306 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_review_info
                     (
                        prod_inst_id         string,
                        LAST_REVIEW_DATE     string,
                        REVIEW_NUM           string,
                        REVIEW_DAYS          string
                     )
                     stored as orcfile
                     LOCATION '/user/hive/TEMP/tmp_custvalue_review_info'
                     
2017-12-29 19:41:03,471 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:03,471 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_vod_info
                     (
                        prod_inst_id           string,
                        LAST_VOD_DATE     string,
                        VOD_NUM           string,
                        VOD_DAYS          string,
                        VOD_FEE           string
                     )
                     stored as orcfile
                     LOCATION '/user/hive/TEMP/tmp_custvalue_vod_info'
                     
2017-12-29 19:41:03,634 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:03,634 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_tv_info
                     (
                        prod_inst_id      string,
                        LAST_TV_DATE      string,
                        TV_NUM            string,
                        TV_TIME           string,
                        TV_DAYS           string
                     )
                     stored as orcfile
                     LOCATION '/user/hive/TEMP/tmp_custvalue_tv_info'
                     
2017-12-29 19:41:03,808 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:03,808 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists tmp_custvalue_view_info
                    (
                        prod_inst_id           STRING,
                        VIEW_NUM_1M           STRING,
                        VIEW_DAYS_1M          STRING,
                        LAST_DATE_VIEW         STRING
                     )
                     stored as orcfile
                     LOCATION '/user/hive/TEMP/tmp_custvalue_view_info'
                
2017-12-29 19:41:03,963 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:03,963 [INFO] {hiveUtils.py:67} Executive sql is:
create table if not exists dwa_cust_value_character(
                        cust_id                  string,
                        cust_name                string,
                        corp_org_id              string,
                        corp_org_name            string,
                        cust_type                string,
                        cust_level               string,
                        net_age                  string,
                        user_count               string,
                        itv_usr_cnt              string,
                        fee_usr_cnt              string,
                        dbitv_usr_cnt            string,
                        ditv_usr_cnt             string,
                        hdtv_usr_cnt             string,
                        lan_usr_cnt              string,
                        prod_inst_id             string,    
                        bill_id                  string,
                        bill_amount_1m           string,
                        bill_amount_3m           string,
                        days_from_last_view      string,
                        view_days_1m             string,
                        view_num_1m              string,
                        prod_count_1m            string,
                        prod_count_3m            string,
                        days_from_last_ord       string,
                        data_source_cd           string,
                        etl_date                 string
            ) PARTITIONED BY (pt_mon string)
              stored as orcfile
              LOCATION '/user/hive/warehouse/test.db/dwa_cust_value_character'
        
2017-12-29 19:41:04,070 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:04,070 [INFO] {custValueCharacter.py:36} 生成客户价值特征指标，开始...
2017-12-29 19:41:04,070 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_valid_cust_user
                  select distinct cust_id
                         ,prod_inst_id
                  from dwa_fact_ins_prod
                  where pt_time = '20170731'
                    and own_corp_std_org_code = '100901'
                    and is_vaild1 = '1'
                    and cust_id is not null
                    and prod_inst_id is not null
2017-12-29 19:41:31,949 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:41:31,949 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_base_info
                  select  distinct t1.cust_id
                          ,t1.cust_code
                          ,t1.cust_name
                          ,t1.own_corp_org_id corp_org_id
                          ,t2.std_org_name corp_org_name
                          ,t1.cust_type
                          ,t1.cust_level
                          ,round(datediff(to_date('2017-07-31'),
                            to_date(t1.create_date))/365,2) net_age
                  from stg_cm_customer t1
                  left join dim_std_organize t2
                  on t1.own_corp_org_id = t2.organize_id and t2.std_org_code = '100901'
                  where  t1.own_corp_org_id is not null
                    and t1.cust_id is not null
                    and to_date(t1.create_date) < to_date('2017-07-31')
                    
2017-12-29 19:42:09,618 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:42:09,618 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_busi_info
                    select  t1.cust_id
                            ,count(distinct case when is_vaild1='1' then t1.prod_inst_id else null end) user_count
                            ,count(distinct case when (t1.is_dbitv = '1' or t1.is_ditv = '1') then t1.prod_inst_id
                              else null end) itv_user_count
                            ,count(distinct case when t1.is_dftv = '1' then t1.prod_inst_id else null end ) fee_usr_cnt
                            ,count(distinct case when t1.is_dbitv= '1' then t1.prod_inst_id else null end ) dbitv_usr_cnt
                            ,count(distinct case when t1.is_ditv = '1' then t1.prod_inst_id else null end) ditv_usr_cnt
                            ,count(distinct case when t1.is_hdtv = '1' then t1.prod_inst_id else null end) hdtv_usr_cnt
                            ,count(distinct case when t1.is_lan = '1' then t1.prod_inst_id else null end) lan_usr_cnt
                    from dwa_fact_ins_prod t1
                    where t1.is_vaild1 ='1'
                       and t1.pt_time = '20170731'
                       and t1.own_corp_std_org_code = '100901'
                       and t1.cust_id is not null
                    group by t1.cust_id
2017-12-29 19:42:47,399 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:42:47,399 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_prod_ord
                  select  distinct t1.prod_inst_id
                          ,t1.srvpkg_id  prod_id
                          ,t1.create_date
                  from stg_h_ins_srvpkg t1
                  where t1.pt_year = '2017'
                    and t1.prod_service_id in ('1002','1003','1005','1006','1008')
        
2017-12-29 19:43:38,455 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:43:38,455 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_prod_ord_count
                   select   tp.prod_inst_id
                           ,count(distinct case when from_unixtime(unix_timestamp(tp.create_date,'yyyy-MM-dd'),
                           'yyyyMM') = 201707 then tp.prod_id else null end) prod_count_1m
                           ,count(distinct tp.prod_id) prod_count_3m
                   from tmp_custvalue_prod_ord tp
                   where  from_unixtime(unix_timestamp(tp.create_date,'yyyy-MM-dd'),'yyyyMM')
                          between 201705 and 201707 
                   group by tp.prod_inst_id
                 
2017-12-29 19:44:28,521 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:44:28,521 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_prod_ord_date
                  select   tp.prod_inst_id
                           ,max(tp.create_date) last_ord_date
                  from tmp_custvalue_prod_ord tp
                  group by tp.prod_inst_id
                   
2017-12-29 19:45:36,226 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:45:36,226 [INFO] {hiveUtils.py:67} Executive sql is:
 insert overwrite table tmp_custvalue_bill_info
                   select t.serv_id prod_inst_id
                          ,sum(case when t.billing_cycle_id = 201707 then t.original_amount else 0 end) bill_amount_1m
                          ,sum(t.original_amount) bill_amount_3m
                    from ( select serv_id
                                 ,original_amount
                                 ,billing_cycle_id
                         from dwd_acct_item
                         where pt_mon between '201705' and '201707'
                     ) t
                    group by t.serv_id
              
2017-12-29 19:47:14,715 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:47:14,716 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_review_info
                  select  user_id
                         ,max(from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMMdd')) LAST_REVIEW_DATE
                         ,count(user_id) REVIEW_NUM
                         ,count(distinct from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMMdd')) review_days
                   from stg_dr_ismp_yyyymm
                   where pt_mon = '201707'
                     and data_source_cd = 'VOD'
                     and from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMM') = '201707'
                   group by user_id
                    
2017-12-29 19:51:46,677 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:51:46,677 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_vod_info
                   select user_id
                          ,max(from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMMdd')) LAST_VOD_DATE
                          ,count(user_id) VOD_NUM
                          ,COUNT(DISTINCT from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMMdd')) vod_days
                          ,sum(charge1)
                   from stg_dr_ismp_yyyymm
                    where pt_mon = '201707'
                    and data_source_cd <> 'VOD'
                    and from_unixtime(unix_timestamp(start_time,'yyyy/MM/dd'),'yyyyMM') = '201707'
                    group by user_id
                   
2017-12-29 19:56:21,581 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:56:21,581 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_tv_info
                  select user_id
                         ,min(from_unixtime(unix_timestamp(time,'yyyy-MM-dd'),'yyyyMMdd')) LAST_TV_DATE
                         ,count(1) TV_NUM
                         ,'0' TV_TIME
                         ,count(distinct from_unixtime(unix_timestamp(time,'yyyy-MM-dd'),'yyyyMMdd')) TV_DAYS
                  from dwd_ter_service
                  where pt_mon = '201707'
                    and OWN_CORP_STD_ORG_CODE='100901'
                    and from_unixtime(unix_timestamp(time,'yyyy-MM-dd'),'yyyyMM') = '201707'
                  group by user_id
        
2017-12-29 19:57:56,458 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:57:56,458 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table tmp_custvalue_view_info
                  select distinct tp.prod_inst_id
                         ,tp.view_num_1m
                         ,tp.view_days_1m
                         ,tp.view_last_date
                  from
                       (select  distinct t1.prod_inst_id
                               ,t1.review_num      view_num_1m
                               ,t1.review_days     view_days_1m
                               ,t1.LAST_REVIEW_DATE  view_last_date
                       from tmp_custvalue_review_info t1
                       union all
                       select  distinct t2.prod_inst_id
                               ,t2.vod_num      view_num_1m
                               ,t2.vod_days     view_days_1m
                               ,t2.LAST_VOD_DATE  view_last_date
                       from tmp_custvalue_vod_info t2
                       union all
                       select  distinct t3.prod_inst_id
                               ,t3.tv_num        view_num_1m
                               ,t3.tv_days       view_days_1m
                               ,t3.LAST_TV_DATE  view_last_date
                       from tmp_custvalue_tv_info t3
                    ) tp
        
2017-12-29 19:59:47,100 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 19:59:47,100 [INFO] {hiveUtils.py:67} Executive sql is:
insert overwrite table dwa_cust_value_character partition (pt_mon = '201707')
                  select distinct t.cust_id
                         ,t1.cust_name
                         ,t1.corp_org_id
                         ,t1.corp_org_name
                         ,t1.cust_type
                         ,t1.cust_level
                         ,t1.net_age
                         ,nvl(t2.user_count,0)
                         ,nvl(t2.itv_user_count,0)
                         ,nvl(t2.fee_usr_cnt,0)  
                         ,nvl(t2.dbitv_usr_cnt,0)
                         ,nvl(t2.ditv_usr_cnt,0) 
                         ,nvl(t2.hdtv_usr_cnt,0) 
                         ,nvl(t2.lan_usr_cnt,0)
                         ,t.prod_inst_id
                         ,t.bill_id
                         ,nvl(t3.bill_amount_1m,0)
                         ,nvl(t3.bill_amount_3m,0)
                         ,nvl(t4.view_days_1m,0)
                         ,nvl(t4.view_num_1m,0)
                         ,case when t4.last_date_view is null then datediff('2017-07-31',
                           '2017-07-01') 
                           else datediff('2017-07-31',
                           from_unixtime(unix_timestamp(t4.last_date_view,'yyyyMMdd'),'yyyy-MM-dd')) end days_from_last_view
                         ,nvl(t5.prod_count_1m,0)
                         ,nvl(t5.prod_count_3m,0)
                         ,case when t6.last_date_ord is null then t6.last_date_ord
                           else datediff('2017-07-31',
                           from_unixtime(unix_timestamp(t6.last_date_ord,'yyyyMMdd'),'yyyy-MM-dd')) end days_from_last_ord
                         ,'TZ' data_source_cd
                         ,CURRENT_TIMESTAMP
                  from dwa_fact_ins_prod t
                  left join tmp_custvalue_base_info t1 on t.cust_id = t1.cust_id
                  left join tmp_custvalue_busi_info t2 on t.cust_id = t2.cust_id
                  left join tmp_custvalue_bill_info t3 on t.prod_inst_id = t3.prod_inst_id
                  left join tmp_custvalue_view_info t4 on t.prod_inst_id = t4.prod_inst_id
                  left join tmp_custvalue_prod_ord_count t5 on t.prod_inst_id = t5.prod_inst_id
                  left join tmp_custvalue_prod_ord_date t6 on t.prod_inst_id = t6.prod_inst_id 
                  where t.pt_time = 20170731 
          
2017-12-29 20:02:00,420 [INFO] {hiveUtils.py:69} Successful implementation of this sql
2017-12-29 20:02:00,420 [INFO] {custValueModel.py:310} model mudule is end at 2017-12-29 20:02:00
